// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package oskrpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OSKRServiceClient is the client API for OSKRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OSKRServiceClient interface {
	GetWifiSignalStrength(ctx context.Context, in *WifiSignalStrengthRequest, opts ...grpc.CallOption) (*WifiSignalStrengthResponse, error)
}

type oSKRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOSKRServiceClient(cc grpc.ClientConnInterface) OSKRServiceClient {
	return &oSKRServiceClient{cc}
}

func (c *oSKRServiceClient) GetWifiSignalStrength(ctx context.Context, in *WifiSignalStrengthRequest, opts ...grpc.CallOption) (*WifiSignalStrengthResponse, error) {
	out := new(WifiSignalStrengthResponse)
	err := c.cc.Invoke(ctx, "/Anki.Vector.oskr.OSKRService/GetWifiSignalStrength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSKRServiceServer is the server API for OSKRService service.
// All implementations must embed UnimplementedOSKRServiceServer
// for forward compatibility
type OSKRServiceServer interface {
	GetWifiSignalStrength(context.Context, *WifiSignalStrengthRequest) (*WifiSignalStrengthResponse, error)
	mustEmbedUnimplementedOSKRServiceServer()
}

// UnimplementedOSKRServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOSKRServiceServer struct {
}

func (UnimplementedOSKRServiceServer) GetWifiSignalStrength(context.Context, *WifiSignalStrengthRequest) (*WifiSignalStrengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWifiSignalStrength not implemented")
}
func (UnimplementedOSKRServiceServer) mustEmbedUnimplementedOSKRServiceServer() {}

// UnsafeOSKRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OSKRServiceServer will
// result in compilation errors.
type UnsafeOSKRServiceServer interface {
	mustEmbedUnimplementedOSKRServiceServer()
}

func RegisterOSKRServiceServer(s grpc.ServiceRegistrar, srv OSKRServiceServer) {
	s.RegisterService(&OSKRService_ServiceDesc, srv)
}

func _OSKRService_GetWifiSignalStrength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WifiSignalStrengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSKRServiceServer).GetWifiSignalStrength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Anki.Vector.oskr.OSKRService/GetWifiSignalStrength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSKRServiceServer).GetWifiSignalStrength(ctx, req.(*WifiSignalStrengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OSKRService_ServiceDesc is the grpc.ServiceDesc for OSKRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OSKRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Anki.Vector.oskr.OSKRService",
	HandlerType: (*OSKRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWifiSignalStrength",
			Handler:    _OSKRService_GetWifiSignalStrength_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oskr.proto",
}
